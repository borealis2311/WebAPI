// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Migrations
{
    [DbContext(typeof(TrainingContext))]
    partial class TrainingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.TableClass.MD_Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.HasKey("CustomerID");

                    b.ToTable("MD_Customer");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_FuncInRole", b =>
                {
                    b.Property<int>("FID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<int?>("FuncID")
                        .HasColumnType("int")
                        .HasColumnName("FuncID");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsBlocked");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.HasKey("FID");

                    b.HasIndex("FuncID");

                    b.HasIndex("RoleID");

                    b.ToTable("SAM_FuncInRole");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_Function", b =>
                {
                    b.Property<int>("FuncID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FuncID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<string>("FuncCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FuncDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Icon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsBlocked");

                    b.Property<int?>("ModuleID")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.HasKey("FuncID");

                    b.HasIndex("ModuleID");

                    b.ToTable("SAM_Function");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<string>("Icon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsBlocked");

                    b.Property<string>("ModuleCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModuleDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.HasKey("ModuleID");

                    b.ToTable("SAM_Module");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsBlocked");

                    b.Property<string>("RoleCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RoleCode");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RoleName");

                    b.Property<string>("RoleNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("RoleNotes");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.HasKey("RoleID");

                    b.ToTable("SAM_Role");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_UserAccount", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccPwd")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccPwd");

                    b.Property<string>("AccountEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AccountName");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActivated")
                        .HasColumnType("bit")
                        .HasColumnName("IsActivated");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsBlocked");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RecoveryEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.HasKey("AccountID");

                    b.HasIndex("CustomerID");

                    b.ToTable("SAM_UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_UserInRole", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountID")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsBlocked");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<DateTime>("ValidDateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidDateTo")
                        .HasColumnType("datetime");

                    b.HasKey("UID");

                    b.HasIndex("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("SAM_UserInRole");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_FuncInRole", b =>
                {
                    b.HasOne("Domain.Entities.TableClass.SAM_Function", "Function")
                        .WithMany("SamFuncInRole")
                        .HasForeignKey("FuncID");

                    b.HasOne("Domain.Entities.TableClass.SAM_Role", "Role")
                        .WithMany("SamFuncInRole")
                        .HasForeignKey("RoleID");

                    b.Navigation("Function");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_Function", b =>
                {
                    b.HasOne("Domain.Entities.TableClass.SAM_Module", "Module")
                        .WithMany("SamFunction")
                        .HasForeignKey("ModuleID");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.TableClass.MD_Customer", "Customer")
                        .WithMany("SamUserAccount")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_UserInRole", b =>
                {
                    b.HasOne("Domain.Entities.TableClass.SAM_UserAccount", "UserAccount")
                        .WithMany("SamUserInRole")
                        .HasForeignKey("AccountID");

                    b.HasOne("Domain.Entities.TableClass.SAM_Role", "Role")
                        .WithMany("SamUserInRole")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.MD_Customer", b =>
                {
                    b.Navigation("SamUserAccount");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_Function", b =>
                {
                    b.Navigation("SamFuncInRole");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_Module", b =>
                {
                    b.Navigation("SamFunction");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_Role", b =>
                {
                    b.Navigation("SamFuncInRole");

                    b.Navigation("SamUserInRole");
                });

            modelBuilder.Entity("Domain.Entities.TableClass.SAM_UserAccount", b =>
                {
                    b.Navigation("SamUserInRole");
                });
#pragma warning restore 612, 618
        }
    }
}
